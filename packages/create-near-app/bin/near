#!/usr/bin/env node

const fs = require('fs/promises');
const { pipeline } = require('stream');
const { Command } = require('commander');
const fetch = require('node-fetch');
const tar = require('tar');

const program = new Command('create-near-app');

program
  .option('-t, --template <name>', 'template to use to create the project', 'status-message')
  .option('-c, --contract-template <name>', 'smart contract template')
  .option('-a, --app-template <name>', 'front-end app template')
  .argument('<folder>', 'folder to create')
  .parse();

const options = program.opts()
console.log(options)
run({ ...options, folder: program.args[0] });

async function run({ contractTemplate, appTemplate, template, folder }) {
  const root = `./${folder}`
  const contractRoot = contractTemplate && !appTemplate ? root : `${root}/contract`;
  
  if(!contractTemplate && !appTemplate) {
    await fs.mkdir(contractRoot, { recursive: true });
    contractTemplate = template;
    appTemplate = template;
  }

  if(contractTemplate) {
    await fs.mkdir(root, { recursive: true });
    const res = await fetch('https://codeload.github.com/near/near-sdk-rs/tar.gz/master');
    pipeline(
      res.body,
      tar.extract({ cwd: contractRoot,  strip: 3 }, [`near-sdk-rs-master/examples/${contractTemplate}`]),
      err => err && console.log(err)
    );
  }

  if(appTemplate) {
    const res = await fetch('https://codeload.github.com/near/near-js/tar.gz/main');
    pipeline(
      res.body,
      tar.extract({ cwd: root,  strip: 3 }, [`near-js-main/examples/${appTemplate}`]),
      err => err && console.log(err)
    );
  }
}
